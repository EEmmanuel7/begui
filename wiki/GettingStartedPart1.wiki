#summary A Getting Started guide for a Windows app using beGUI
#labels Phase-Deploy,Featured

= Creating a new application using BeGUI =

<h2>Part 1: An empty application window</h2>
<p>Open Visual Studio and start a new, empty Win32 project:</p>
<ul>
		<li>File -> New -> Project</li>
		<li>Select "Win32 Project"</li>
		<li>Give a name to the project and press OK</li>
		<li>In Application Settings, check "Empty Project" and press Finish</li>
</ul>

<p>Now we have our new, empty project. We start by creating a `WinMain` function as the entry point for our program. Create a new file, named `main.cpp`, and write the following in it:</p>
{{{
	int WINAPI WinMain(HINSTANCE	hInstance,		// Instance
			HINSTANCE	hPrevInstance,		// Previous Instance
			LPSTR		lpCmdLine,		// Command Line Parameters
			int		nCmdShow)		// Window Show State
	{
		return 0;
	}
}}}

<p>We just made the simplest possible Windows program. Now, we need to create our main window, initialize OpenGL and beGUI and get rendering. For this tutorial, we will use the base Win32 application class provided by beGUI. Notice that this is not necessary, you can pretty much grab beGUI controls and throw them into any OpenGL application.</p>

<p>The base application class provided by beGUI for Win32 platforms (the only one right now :P) is `BaseApp_Win`. We will derive a new class from this one. Let's name it with the imaginative name `Application`.Create a new file and name it `Application.h`.</p>

<p>First, we will include the beGUI header files:</p>
{{{
	#pragma once
	#include "bgui.h"
	#include <windows.h>
}}}

<p>Make sure that you add the path to the beGUI headers to the directories in Visual Studio. Also, make sure that you link to `begui.lib`.</p>

<p>Now, let's create our application class:</p>
{{{
	class Application : public BaseApp_Win
	{
	};
}}}

<p>Also, modify `WinMain` in the following way:</p>
{{{
	#include "Application.h"

	Application g_theApp;

	int WINAPI WinMain(HINSTANCE	hInstance,		// Instance
			HINSTANCE	hPrevInstance,		// Previous Instance
			LPSTR		lpCmdLine,		// Command Line Parameters
			int		nCmdShow)		// Window Show State
	{
		return g_theApp.run("BeGUI test app", 800, 600);
	}
}}}

<h3>Building</h3>
<p>Ok. One more step is missing. BeGUI is using the FreeType library. So, go and download FreeType (2.3.5 used with beGUI, newer versions will probably work fine as well) from <a href="http://www.freetype.org/">here</a>. Make sure that you set up the include and library directories in Visual Studio correctly (to include the corresponding directories of FreeType). Then link with:
<ul>
<li>`freetype235MT.lib`</li>
<li>`glaux.lib` (this dependency will be removed soon)</li>
<li>`begui.lib`</li>
</ul>
To do so, in Visual Studio, add the above in the field `Project Properties->Linker->Input->Additional Dependencies`. Good. Let's compile and run this simple program, shall we? Before you run it, make sure that the OpenGL and FreeType dlls are reachable (e.g. in the application folder). If everything went well, you should see the following after the program loads:</p>

<img src="" />

<p>Yay! You just made your first application based on beGUI. Doesn't look all that exciting though, does it? We should add some things to it. Let's say, a menu, a couple of windows and a bunch of controls.</p>

<a href="http://code.google.com/p/begui/wiki/GettingStartedPart2">continue to Part 2</a>